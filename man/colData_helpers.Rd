% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colData_helpers.R
\name{colData_tibble}
\alias{colData_tibble}
\alias{colData_common}
\alias{colData_distinct}
\alias{names_abbreviate}
\title{Helper functions for simplifying colData}
\usage{
colData_tibble(sce, abbreviate_colnames = FALSE)

colData_common(sce, abbreviate_colnames = FALSE)

colData_distinct(sce, abbreviate_colnames = FALSE)

names_abbreviate(x, sep = "[_\\\\.]", map = FALSE)
}
\arguments{
\item{sce}{a `SummarizedExperiment` or derived object, e.g., a
`SingleCellExperiment`.}

\item{abbreviate_colnames}{logical(1). When `TRUE`, abbreviate
column names of `colData(sce)` using `names_abbreviate()`.}

\item{x}{Any object for which `names(x)` returns a character
vector.}

\item{sep}{character(1) regular expression identifying single
characters to define words. The default splits a name into
words at each occurrence of `_` or `.`.}

\item{map}{logical(1) when FALSE (default) the return value is a
vector of abbreviated names. When TRUE the return value is a
tibble with columns `name` and `abbrev` corresponding to the
original and abbreviated names.}
}
\value{
`colData_tibble()` returns a tibble representation of
    `colData()`.

`colData_column()` returns a two-column tibble. The first
    column, `key` corresponds to `colData()` column names for which
    only a single distinct value is present. The second column
    `value` is the unique value.

`colData_distinct()` returns a tibble containing only those
    `colData()` columns with more than one value.

`names_abbreviate()` returns a vector of abbreviated names
    (`map = FALSE`, default) or a tibble (`map = TRUE`) with
    columns `name` and `abbrev` corresponding to the original and
    abbreviated names.
}
\description{
`colData_tibble()` creates a tibble from `colData()`

`colData_column()` scans `colData()` columns to
    identify those with a single distinct value.

`colData_distinct()` produces a subset of `colData()`
    columns which contain more than one distinct value.

`names_abbreviate()` abbreviates object `names()` to
    shortest common word suffix, using `sep` to define words.
}
\examples{
nms <- setNames(nm = c("common_prefix.a_name", "common_prefix.a_title"))
names_abbreviate(nms)
names_abbreviate(nms, map=TRUE)

}
